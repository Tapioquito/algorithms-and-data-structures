                QUICK SORT

    - Like merge sort, exploits the fact that arrays of 0 or 1 element are ALWAYS sorted
    - Works by selecting one element (called the "pivot")
    and finding the INDEX where the pivot SHOULD end up in the sorted array
    - Once the pivot is positioned appropriately, quick sort can be applied on either side of the pivot
  

            PIVOT/PARTITION HELPER 

    - In order to implement QUICK sort, it's useful to first implement a function responsible for 
    arranging elements in an array on either side of a pivot
    - Given an array, this helper function should designate an element as the pivot
    - It should then rearrange elements in the array so that all values less than the pivot
    are move to the left of the pivot, and all values greater than the pivot are moved
    to the right of the pivot
    - The order of the elements on either side of the pivot doesn't matter!
    - The helper should do this IN PLACE, htat is, should NOT create a new array!!!
    - When complete, the helper should return the INDEX of the pivot 

          HOW TO PICK A PIVOT?

    - The runtime of quick sort depends in part on how one selects the pivot;
    - Ideally, the pivot should be chosen so that it's roughly the median values in the data set you're sorting;
    - For simplicity sake, we'll always choose the pivot to be the FIRST element*

                * We'll talk about CONSEQUENCES of this later
    
            EXAMPLE
    let arr = [ 5, 2, 1, 8, 4, 7, 6, 3]

    pivot(arr); // Index: 4 - Element: 5

    arr;
    Acceptables mutations:
        [2, 1, 4, 3, 5, 8, 7, 6]
        [1, 4, 3, 2, 5, 7, 6, 8]
        [3, 2, 1, 4, 5, 7, 6, 8]
        [4, 1, 2, 3, 5, 6, 8, 7]

    There are other acceptable mutations too!

    In this example, all that matters is that number 5 is in the correct spot AND we return the INDEX,
    wich is 4 in thsi case

            PIVOT PSEUDOCODE:

    - It will help to accept three arguments:
                an array, an starting index and an ending index.
    - These can default to 0 and the array length - 1, respectively
    - Grab the pivot from the START of the array;
    - Store the current pivot INDEX in a variable (this will keep track of where the pivot 
        should end up);
         - If the pivot is GREATER than the current element, increment the pivot's index 
         variable and then SWAP the current element
         with the element at the pivot index;
    - SWAP the starting element (ex. the pivot) with the pivot INDEX;
    - RETURN the pivot INDEX.